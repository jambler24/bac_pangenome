/*
 * -------------------------------------------------
 *  UCT Pangenome Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
// Some help with time stamps
import java.text.SimpleDateFormat

params {
  name = false
  version = 0.1 //pipeline version

  // Project info
  ticket            = 0 // To be used later
  project           = 'NA' // To be added later

  // Input options
  reads             = "sample_sheet.csv"
  genome            = "reference.fa"

  // Pipeline Options
  timestamp         = new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())
  outdir            = "$baseDir/run-${timestamp}-VarPipe"


  // Variant calling and filtering
  minQuality        = 20
  vcf_qual_cutoff   = 1000
  aligner           = 'bwa-mem'

  //multiqc_config = "$baseDir/assets/multiqc_config.yaml"

}

profiles {
  ilifu{
    includeConfig 'conf/ilifu.config'
    includeConfig 'conf/base.config'
  }
  uct_hex{
    includeConfig 'conf/uct_hex.config'
    includeConfig 'conf/base.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }
  
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/bacVP_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/bacVP_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/bacVP_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/bacVP_DAG.svg"
}

manifest {
  homePage = 'https://github.com/uct-cbio/bacterial_variant_calling.git'
  description = 'Nextflow bacterial variant and pylogenetic analysis pipeline for UCT CBIO'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
